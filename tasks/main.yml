- name: Create HAproxy Namespace
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ nginx_namespace | default('nginx-ingress') }}"

- name: Create HAproxy ServiceAccount
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: haproxy-kubernetes-ingress
      namespace: "{{ nginx_namespace | default('nginx-ingress') }}"

- name: Create HAproxy ClusterRole
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      kind: ClusterRole
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: haproxy-kubernetes-ingress
      rules:
      - apiGroups:
        - ""
        resources:
        - configmaps
        - endpoints
        - nodes
        - pods
        - services
        - namespaces
        - events
        - serviceaccounts
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - "extensions"
        - "networking.k8s.io"
        resources:
        - ingresses
        - ingresses/status
        - ingressclasses
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - "extensions"
        - "networking.k8s.io"
        resources:
        - ingresses/status
        verbs:
        - update
      - apiGroups:
        - ""
        resources:
        - secrets
        verbs:
        - get
        - list
        - watch
        - create
        - patch
        - update
      - apiGroups:
        - core.haproxy.org
        resources:
        - '*'
        verbs:
        - get
        - list
        - watch
        - update
      - apiGroups:
        - "discovery.k8s.io"
        resources:
        - endpointslices
        verbs:
        - get
        - list
        - watch

- name: Create HAproxy ClusterRoleBinding
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      kind: ClusterRoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: haproxy-kubernetes-ingress
        namespace: "{{ nginx_namespace | default('nginx-ingress') }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: haproxy-kubernetes-ingress
      subjects:
      - kind: ServiceAccount
        name: haproxy-kubernetes-ingress
        namespace: "{{ nginx_namespace | default('nginx-ingress') }}"

- name: Create HAproxy ConfigMap for IngressClass
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: haproxy-kubernetes-ingress
        namespace: "{{ nginx_namespace | default('nginx-ingress') }}"
      data:
        dynamic-scaling: "true"

- name: Create HAproxy IngressClass
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:

      apiVersion: networking.k8s.io/v1
      kind: IngressClass
      metadata:
        namespace: "{{ nginx_namespace | default('nginx-ingress') }}"
        name: "{{ ingress_class | default('nginx') }}"
      spec:
        controller: haproxy-ingress.github.io/controller
        parameters:
          kind: ConfigMap
          name: haproxy-ingress-class-options


- name: Create HAproxy ConfigMap
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      apiVersion: v1
      data:
        balance-algorithm: roundrobin
        maxconn-server: "500"
        ssl-redirect: "false"
      kind: ConfigMap
      metadata:
        name: haproxy-ingress-class-options
        namespace: "{{ nginx_namespace | default('nginx-ingress') }}"

- name: Create HAproxy DaemonSet
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      apiVersion: apps/v1
      kind: DaemonSet
      metadata:
        labels:
          run: haproxy-ingress
        name: haproxy-kubernetes-ingress
        namespace: "{{ nginx_namespace | default('nginx-ingress') }}"
      spec:
        selector:
          matchLabels:
            run: haproxy-ingress
        template:
          metadata:
            labels:
              run: haproxy-ingress
          spec:
            serviceAccountName: haproxy-kubernetes-ingress
            containers:
            - name: haproxy-ingress
              image: haproxytech/kubernetes-ingress
              args:
                - "--configmap={{ nginx_namespace | default('nginx-ingress') }}/haproxy-kubernetes-ingress"
                - "--ingress.class={{ ingress_class | default('nginx') }}"
                - --log=info
              securityContext:
                runAsUser:  1000
                runAsGroup: 1000
                capabilities:
                  drop:
                    - ALL
                  add:
                    - NET_BIND_SERVICE
              resources:
                requests:
                  cpu: "500m"
                  memory: "50Mi"
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 1042
              ports:
              - name: http
                containerPort: 80
                hostPort: 81
              - name: https
                containerPort: 443
                hostPort: 1443
              - name: stat
                containerPort: 1024
              env:
              - name: TZ
                value: "Etc/UTC"
              - name: POD_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace

- name: Create HAproxy Service
  kubernetes.core.k8s:
    state: "{{ state if state is defined else 'present' }}"
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        labels:
          run: haproxy-ingress
        name: haproxy-kubernetes-ingress
        namespace: "{{ nginx_namespace | default('nginx-ingress') }}"
      spec:
        selector:
          run: haproxy-ingress
        type: NodePort
        ports:
        - name: http
          port: 30099
          protocol: TCP
          targetPort: 80
        - name: https
          port: 30943
          protocol: TCP
          targetPort: 443
        - name: stat
          port: 31124
          protocol: TCP
          targetPort: 1024
